{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#                                        Python Tutorial                                   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Print Statement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World\n"
     ]
    }
   ],
   "source": [
    "print('Hello World')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is version3.7.4\n"
     ]
    }
   ],
   "source": [
    "## formatting a string using a numeric constant .format function is used for substituoiion in astring\n",
    "## print (\"Hello, I am {} years old !\".format(18))  \n",
    "\n",
    "import platform\n",
    "print('this is version{}'.format(platform.python_version()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sonam\n",
      "this is version3.7.4\n",
      "hello\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    print('hello')\n",
    "    \n",
    "    \n",
    "def message():\n",
    "    print('this is version{}'.format(platform.python_version()))\n",
    "    main()\n",
    "print('sonam')\n",
    "\n",
    "if __name__ == '__main__': message()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x is 10 and y is 20\n"
     ]
    }
   ],
   "source": [
    "## insert a numerical value in string using format\n",
    "x = 10\n",
    "y = 20\n",
    "if x < y:\n",
    "    z = 'sonanm'\n",
    "    print('x is {} and y is {}'.format(x,y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "z is 16\n"
     ]
    }
   ],
   "source": [
    "print('z is {}'.format(z))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# If and Else"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "less\n"
     ]
    }
   ],
   "source": [
    "## if else and elif\n",
    "x=10\n",
    "y=15\n",
    "if x < 15:\n",
    "    print('less')\n",
    "elif x > 10:\n",
    "    print('wow')\n",
    "else:\n",
    "    print('do smthing else')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# While and For Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sona\n",
      "mona\n",
      "nona\n",
      "rona\n"
     ]
    }
   ],
   "source": [
    "#learn loos\n",
    "words = ['sona','mona','nona','rona']\n",
    "n=0\n",
    "while n < 4:\n",
    "    print(words[n])\n",
    "    n=n+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sona\n",
      "mona\n",
      "nona\n",
      "rona\n"
     ]
    }
   ],
   "source": [
    "# rember while lood usese indexes and in for we itereate over the word itself\n",
    "new_wrd = ['sona','mona','nona','rona']\n",
    "for i in new_wrd:\n",
    "    print(i)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create a Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46\n"
     ]
    }
   ],
   "source": [
    "#basic function\n",
    "\n",
    "def banana(n):\n",
    "    print(n)\n",
    "    \n",
    "banana(46)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#use of return\n",
    "\n",
    "def function(n=4):\n",
    "    print(n)\n",
    "    return 9\n",
    "function(6)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isPrime(n):\n",
    "    if n <= 1:\n",
    "        return False\n",
    "    for x in range(2,n):\n",
    "         if n % 2 == 0:\n",
    "                return False\n",
    "    else:\n",
    "        return True\n",
    "   \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "## to make a list\n",
    "def list_primes():\n",
    "    list_empty = []\n",
    "    for n in range(100):\n",
    "        if isPrime(n):\n",
    "            list_empty.append(n)\n",
    "    print(list_empty)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n"
     ]
    }
   ],
   "source": [
    "list_primes()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create a Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "quack!\n",
      "female\n"
     ]
    }
   ],
   "source": [
    "## Create a Class, class object in main fucntion then calling the class methnod from outside the class\n",
    "## use of self: its the reference to the class\n",
    "\n",
    "class Duck:\n",
    "    sound = 'quack!'\n",
    "    gender = 'female'\n",
    "    def duck(self):\n",
    "        print(self.sound)\n",
    "        \n",
    "    def bird(self):\n",
    "        print(self.gender)\n",
    "        \n",
    "\n",
    "def main():\n",
    "    donald = Duck()\n",
    "    donald.duck()\n",
    "    donald.bird()\n",
    "    \n",
    "if __name__ == '__main__': main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BEST SNACK\n",
      "seven is 7 but not 8\n"
     ]
    }
   ],
   "source": [
    "# strings are object\n",
    "cracks = 'best snack'.upper()\n",
    "print(cracks)\n",
    "\n",
    "x = 'seven is {} but not {}'.format(7,8)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How to use Range() Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n",
      "5\n",
      "7\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "# range first paramet is starting point second is end point and third is for stepping\n",
    "x = range(1,10,2)\n",
    "\n",
    "for i in x:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tuples is represented as a = (1,2,3) and list as a = [1,2,3] and dictionary as {'banana':1, 'class':2}. Element is these three can be of any dataype.  lists and dictionaries are mutable , meaning you can change their content without changing their identity Other objects like integers, floats, strings and tuples are objects that can not be changed.\n",
    "Example a[1] = 50 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "# example of a list\n",
    "\n",
    "#x = [1,2,3,4,5]\n",
    "x = list(range(10))\n",
    "for i in x:\n",
    "    print(i)\n",
    "print(x[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Append and Insert in List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "melon@Apple@Banana@Orange@Grapes\n",
      "5\n",
      "melon Banana Orange Grapes "
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    x = ['Apple','Banana','Orange','kiwi']\n",
    "    ind = x.index('Orange')\n",
    "    x.append('Grapes')\n",
    "    x.insert(0,'melon')\n",
    "    x.remove('kiwi')\n",
    "    print('@'.join(x))\n",
    "    print(len())\n",
    "    del x[1:2]\n",
    "    second_fn(x)\n",
    "    \n",
    "def second_fn(n):\n",
    "    for i in n:\n",
    "        print(i, end =\" \", flush=True)\n",
    "main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "india delhi\n",
      "U.S New Yrk\n",
      "China Beijing\n"
     ]
    }
   ],
   "source": [
    "## dictionary_example1\n",
    "new_dict = {'india': 'delhi', 'U.S': 'New Yrk', 'China': 'Beijing'}\n",
    "for i,j in new_dict.items():\n",
    "    print(i,j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kitten\n",
      "puppy\n",
      "lion\n",
      "meow\n",
      "ruff\n",
      "grrr\n",
      "meow\n"
     ]
    }
   ],
   "source": [
    "## dictionary_example\n",
    "new_dict = dict(kitten = 'meow', puppy = 'ruff', lion = 'grrr')\n",
    "for i in new_dict.keys():\n",
    "    print(i)\n",
    "    \n",
    "for i in new_dict.values():\n",
    "    print(i)\n",
    "    \n",
    "print(new_dict['kitten'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remeber that in dictionary if you want to print both the key and values then you need to use .items()."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As discussed above dictionary is mutable. lets try it!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "india delhi\n",
      "U.S New Yrk\n",
      "China New_Beijing\n"
     ]
    }
   ],
   "source": [
    "new_dict = {'india': 'delhi', 'U.S': 'New Yrk', 'China': 'Beijing'}\n",
    "new_dict['China']='New_Beijing'\n",
    "for i,j in new_dict.items():\n",
    "    print(i,j)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b, ,i,l,.,t,I,a,d,y,u,e,f,s\n"
     ]
    }
   ],
   "source": [
    "#Unordered list of uniques characters. Sets does not allow duplicates.\n",
    "# you can check members of one set that ar not in other by a - b or other operations like a&b\n",
    "\n",
    "a = set('Its a beauitful day.')\n",
    "b = set('Its a beautiful morning')\n",
    "print(','.join(a))\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Print type "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = (1,'two',[1,2],3)\n",
    "y = [1,(1,2),'three']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'tuple'>\n",
      "<class 'list'>\n",
      "<class 'list'>\n",
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "print(type(x))\n",
    "print(type(y))\n",
    "print(type(x[2]))\n",
    "print(type(y[2]))\n",
    "\n",
    "## if you want to write a conditional statement like if(type(x)) == 'tuple' it will not work, instead use a \n",
    "## special function called isinstance\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "if you want to write a conditional statement like if(type(x)) == 'tuple' it will not work, instead use a \n",
    "special function called isinstance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "list\n"
     ]
    }
   ],
   "source": [
    "if isinstance(y, tuple):\n",
    "    print(\"tuple\")\n",
    "elif isinstance(y, list):\n",
    "    print(\"list\")\n",
    "else:\n",
    "    print(\"nope\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ternary Conditonal Assignment : a if condition else b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "carry an umbrella\n"
     ]
    }
   ],
   "source": [
    "#rain = True\n",
    "rain = 1\n",
    "x = 'carry an umbrella' if rain else 'Dont need to carry'\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Object is called by reference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2]\n",
      "meow\n",
      "value is:[2]\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    x = [5]\n",
    "    kitten(x)\n",
    "    print('value is:{}'.format(x))\n",
    "\n",
    "def kitten(n):\n",
    "    n[0] = 2\n",
    "    print(n)\n",
    "    print('meow')\n",
    "\n",
    "    \n",
    "if __name__ == '__main__': main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Arguement List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mena\n",
      "nena\n",
      "siya\n",
      "roya\n"
     ]
    }
   ],
   "source": [
    "def kitten(*args):\n",
    "    if len(args):\n",
    "        for i in args:\n",
    "            print(i)\n",
    "    else:\n",
    "        print('none')\n",
    "\n",
    "\n",
    "\n",
    "kitten('mena','nena','siya','roya')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Keyword Arguments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "weekday Monday is the 1 day in week\n",
      "weekday Tuesday is the 2 day in week\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    x = dict(Monday = 1,Tuesday = 2)\n",
    "    week(**x)\n",
    "    \n",
    "def week(**kwargs):\n",
    "    #print(kwargs['Monday'])\n",
    "    for i in kwargs:\n",
    "        print('weekday {} is the {} day in week'.format(i,kwargs[i]))\n",
    "        \n",
    "main()\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decorators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is the main link\n",
      "this is the smallest link\n",
      "this is the second link\n"
     ]
    }
   ],
   "source": [
    "def country(n):\n",
    "    def state():\n",
    "        print(\"this is the main link\")\n",
    "        n()\n",
    "        print(\"this is the second link\")\n",
    "    return state\n",
    "\n",
    "def city():\n",
    "    print(\"this is the smallest link\")\n",
    "    \n",
    "x=country(city)\n",
    "x()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "above code can be modifed with the help of decorator as below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is the main link\n",
      "this is the smallest link\n",
      "this is the second link\n"
     ]
    }
   ],
   "source": [
    "def country(n):\n",
    "    def state():\n",
    "        print(\"this is the main link\")\n",
    "        n()\n",
    "        print(\"this is the second link\")\n",
    "    return state\n",
    "\n",
    "@country\n",
    "def city():\n",
    "    print(\"this is the smallest link\")\n",
    "    \n",
    "city()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# List Comprehension"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n",
      "[0, 0, 4, 0, 0, 10, 0, 0, 16, 0, 0, 22, 0, 0, 28]\n",
      "[4, 10, 16, 22, 28]\n",
      "{0: 0, 2: 4, 4: 8, 6: 12, 8: 16, 10: 20, 12: 24, 14: 28, 16: 32, 18: 36, 20: 40, 22: 44, 24: 48, 26: 52, 28: 56}\n"
     ]
    }
   ],
   "source": [
    "x = range(15)\n",
    "for i in x:\n",
    "    print(i)\n",
    "    \n",
    "x_1=[i*2 for i in x]\n",
    "print(x_1)\n",
    "\n",
    "#if can be used  after for or before\n",
    "x_2 = [i if i%3 == 1 else 0 for i in x_1]\n",
    "print(x_2)\n",
    "\n",
    "x_3 = [i for i in x_1 if i%3 == 1]\n",
    "print(x_3)\n",
    "\n",
    "#comprehension for dictionary\n",
    "\n",
    "x_3 = {i:i*2 for i in x_1}\n",
    "print(x_3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Constructing an Object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The k is named \"m\" and says \"b\"\n"
     ]
    }
   ],
   "source": [
    "# if you use self then that variable  can be accessed inside any functioin of that class\n",
    "class Animal:\n",
    "    #class constructor which acts as an intializor, first parmtr is always self,object variable always have _\n",
    "    # '_' signifies that variable is private and should not be accessed directly ,always use a method to access them\n",
    "    def __init__(self, type, name, sound):\n",
    "        self._type = type\n",
    "        self._name = name\n",
    "        self._sound = sound\n",
    "    #getter method i below and the value is set above\n",
    "    #if first arguement is self then it is a method not a function\n",
    "    def type(self):\n",
    "        return self._type\n",
    "    def name(self):\n",
    "        return self._name\n",
    "    def sound(self):\n",
    "        return self._sound\n",
    "def print_animal(o):\n",
    "    #isinstance checks that o is animal type object\n",
    "    if not isinstance(o, Animal):\n",
    "        raise TypeError('print_animal(): requires an Animal')\n",
    "    print('The {} is named \"{}\" and says \"{}\"'.format(o.type(), o.name(), o.sound()))\n",
    "    \n",
    "def main():\n",
    "    #creating object of the main class and initializing iwth various parameters\n",
    "    a0 = Animal('k','m','b')\n",
    "    print_animal(a0)\n",
    "\n",
    "    \n",
    "    \n",
    "if __name__ == '__main__': main()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Splitting and Joining String"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This*is*a*very*very*long*string\n"
     ]
    }
   ],
   "source": [
    "s = 'This is a very very long string'\n",
    "\n",
    "a = s.split()\n",
    "b = '*'.join(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Opening a File "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is a beautiful day\n",
      "but tomorrow was better\n",
      "it may rain today\n"
     ]
    }
   ],
   "source": [
    "# rstrip will remove any whitespace including new line\n",
    "#by default 'open' opens in read only mode\n",
    "f = open('day.txt')\n",
    "for line in f:\n",
    "    print(line.rstrip())\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use of enumerate to get the index:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:Tiger\n",
      "1:Dog\n",
      "2:Cat\n"
     ]
    }
   ],
   "source": [
    "animal = ('Tiger','Dog','Cat')\n",
    "for i,j in enumerate(animal): print(f'{i}:{j}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.7.4 (default, Aug 13 2019, 15:17:50) \n",
      "[Clang 4.0.1 (tags/RELEASE_401/final)]\n",
      "2020-04-06 12:35:06.963006\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "import os\n",
    "import datetime\n",
    "\n",
    "\n",
    "v = sys.version\n",
    "print(v)\n",
    "\n",
    "time = datetime.datetime.now()\n",
    "print(time)\n",
    "\n",
    "#current working directory\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
